//Задача 29. 
/* Напишите программу, которая задаёт массив из (number) элементов и выводит их на экран.*/

try /* Блок обработки исключений.*/
{
    /* Создаем массив (он сейчас на 57 строке) и сверху пишем методы. */
    // Метод заполнения массива.

    void FillArray(decimal[] collection) /*void-оператор, который ни чего не возвращает и значит, 
    что с ним не нужно использовать оператор return, который делает возврат. FillArray 
    (перевод-заполняющий массив)- наименование метода . collection (перевод коллекция)- аргумент
    (любое слово). Формат decimal: хранит десятичное дробное число. Если употребляется без десятичной
    запятой, имеет значение от ±1.0*10-28 до ±7.9228*1028, может хранить 28 знаков после запятой.*/
    {
        for (int index = 0; index < collection.Length; index++) /* Вводим переменную (index = 0)- 
        это позиция первого элемента массива, в формате int который хранит целое число от
        -2147483648 до 2147483647. До тех пор, пока позиция элемента массива меньше длины массива
        (collection.Length), увеличиваем значение позиции элемента на (1) при каждой итерации. */
        {
            Console.WriteLine($"Введите {index + 1} элемент массива."); /* Вывод на экран сообщения.*/
            Console.WriteLine("При вводе дробного числа воспользуйтесь запятой.");

            collection[index] = Convert.ToDecimal(Console.ReadLine());   /* Элемент(collection) 
            с индексом(index) в формате (ToDecimal) считывается с консоли (Console.ReadLine).*/
        }
    }

    // Метод печати массива на экран.

    void PrintArray(decimal[] col) /* PrintArray-печать массива. col- это какая-то другая переменная. */
    {
        for (int index = 0; index < col.Length; index++) /* Вводим переменную (index)- это позиция первого
        элемента массива. До тех пор, пока позиция элемента массива меньше длины массива (col.Length),
        увеличиваем значение позиции элемента на (1) при каждой итерации. */
        {
            if (index == 0) Console.Write($"["); /* Если индекс элемента раве нулю, 
            т.е. (первый элемент массива), то на экран, сначала, выводим левую квадратную скобку.*/

            Console.Write($"({col[index]})"); /* Выводим на экран, в одну строку, все элементы массива,
                                                 в круглых скобках, каждый, в отдельности.*/

            if (index < col.Length - 1) Console.Write($","); /* Если индекс элемента меньше длины 
            массива минус один, т.е. (последний элемент массива), то ставим запятую.*/

            if (index == col.Length - 1) Console.Write($"]"); /* Если индекс элемента равен длине 
            массива минус один, т.е. (последний элемент массива), то ставим правую квадратную скобку.*/
        }
    }

    Console.WriteLine("Введите число количества элементов требуемого массива."); /* Вывод на экран
                                                                                        сообщения.*/
    Console.WriteLine("Число должно быть целым и положительным."); /* Вывод на экран сообщения.*/

    int number = Convert.ToInt32(Console.ReadLine()); /* Вводим переменную (number- число)- это то
        число количества элементов требуемого массива, которое мы изначально вводим на клавиатуре.*/

    decimal[] array = new decimal[number]; /*Создаем массив и укажем, что в нем (number) элементов.*/

    FillArray(array);
    PrintArray(array);

    if (number == 0)
    {
        Console.WriteLine("В массиве нет элементов"); /* Если количество элементов массива
        равно нулю, то выводим на экран "В массиве нет элементов".*/
        return; /* Возвращаемся на исходную точку.*/
    }

}
catch /* Окончание блока обработки исключений.*/
{
    Console.WriteLine("Некорректный ввод данных.");
}

